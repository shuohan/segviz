#!/usr/bin/env python3

import argparse

desc = 'Create checkerboard fusion of two images. Their sizes should be the same.'
parser = argparse.ArgumentParser(description=desc)
parser.add_argument('-1', '--image1', help='The first image to fuse.')
parser.add_argument('-2', '--image2', help='The second image to fuse.')
parser.add_argument('-o', '--output', required=True, help='The output folder.')
parser.add_argument('-a', '--alpha', help='The alpha of the second image.',
                    required=False, default=0, type=float)

help = ('Min cutoff percentage of image 1 intensities. Any intensties less '
        'than or equal to this value is set to 0. If None, use the minimum '
        'of the image.')
parser.add_argument('-m', '--vmin1', type=float, default=None, help=help)
help = ('Max cutoff percentage of image 1 intensities. Any intensties greater '
        'than or equal to this value is set to 255. If None, use the maximum'
        'of the image.')
parser.add_argument('-M', '--vmax1', type=float, default=None, help=help)

help = ('Min cutoff percentage of image 2 intensities. Any intensties less '
        'than or equal to this value is set to 0. If None, use the minimum '
        'of the image.')
parser.add_argument('-x', '--vmin2', type=float, default=None, help=help)
help = ('Max cutoff percentage of image 2 intensities. Any intensties greater '
        'than or equal to this value is set to 255. If None, use the maximum'
        'of the image.')
parser.add_argument('-X', '--vmax2', type=float, default=None, help=help)

parser.add_argument('-q', '--quantile', default=False, action='store_true',
                    help='Use quantiles to automatically scale the image.')
help = 'Concatenate slices into a single .png file as a row/column.' 
parser.add_argument('-C', '--concat', action='store_true', help=help)
parser.add_argument('-R', '--concat-as-row', action='store_true',
                    help='Show the slices as a row when use -C.')
parser.add_argument('-n', '--slice-range', type=int, default=None, nargs=2,
                    help='The slice range to show.')
parser.add_argument('-v', '--view', choices=['axial', 'coronal', 'sagittal'],
                    default='axial', help='The view to convert into.')
parser.add_argument('-A', '--use-affine', action='store_true', help=help)
parser.add_argument('-t', '--slice-step', default=1, type=int,
                    help='Show every this number of slices.')
parser.add_argument('-P', '--padding-color',
                    type=int, nargs=4, default=[0, 0, 0, 255],
                    help='The padding color (0..255 RGBA) when use -C.')

args = parser.parse_args()


import nibabel as nib
import numpy as np
from pathlib import Path

from improc3d import transform_to_axial
from improc3d import transform_to_coronal
from improc3d import transform_to_sagittal
from segviz.render import AlphaRenderer
from segviz.utils import concat_pils


if args.view == 'axial':
    transform = transform_to_axial
elif args.view == 'coronal':
    transform = transform_to_coronal
elif args.view == 'sagittal':
    transform = transform_to_sagittal
coarse = not args.use_affine

image1_obj = nib.load(args.image1)
image1 = image1_obj.get_fdata(dtype=np.float32)
image2_obj = nib.load(args.image2)
image2 = image2_obj.get_fdata(dtype=np.float32)

affine = image1_obj.affine
if args.use_affine:
    assert np.allclose(affine, image2_obj.affine)
image1 = transform(image1, affine, order=1, coarse=coarse)
image2 = transform(image2, affine, order=1, coarse=coarse)

renderer = AlphaRenderer(image1, image2, alpha=args.alpha)

if args.quantile:
    renderer.automatic_rescale()
else:
    renderer.rescale_intensity(args.vmin1, args.vmax1, args.vmin2, args.vmax2)

num_slices = len(renderer)
num_digits = len(str(num_slices))
if args.slice_range is not None:
    start = max(args.slice_range[0], 0)
    stop = min(args.slice_range[1], len(renderer))
    slice_range = range(start, stop, args.slice_step)
else:
    slice_range = range(0, num_slices, args.slice_step)

args.output = Path(args.output)
if args.concat:
    pics = [[renderer[s_ind]] for s_ind in slice_range]
    if args.concat_as_row:
        pics = list(zip(*pics))
    pic = concat_pils(pics, bg_color=args.padding_color)
    args.output.parent.mkdir(exist_ok=True, parents=True)
    filename = args.output.with_suffix('.png')
    pic.save(filename)

else:
    print('slice')
    args.output.mkdir(exist_ok=True, parents=True)
    for s_ind in slice_range:
        filename = args.output.joinpath(('%%0%dd.png' % num_digits) % s_ind)
        pic = renderer[s_ind]
        pic.save(filename)
