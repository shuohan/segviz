#!/usr/bin/env python3

import argparse

class Formatter(argparse.ArgumentDefaultsHelpFormatter,
                argparse.RawDescriptionHelpFormatter): pass
desc = ('Show segmentation overlays in a .html file. Example input file:\n\n'
        '    name1,l,path/to/image1.nii.gz,path/to/label1.nii.gz\n'
        '    name2,L,path/to/image1.nii.gz,path/to/label1.nii.gz\n'
        '    name3,c,path/to/image2.nii.gz,path/to/image3.nii.gz\n'
        '    name4,i,path/to/image3.nii.gz\n\n'
        'The first column is the name of this row.\n\n'
        'The second column is the display mode. "l" means label image overlay\n'
        'but with an image before; "L" means label image overlay only; "c" means\n'
        'checkerboard overly; "i" means image only.\n\n'
        'The third and forth rows are the images to show. If in "l" mode, the\n'
        'third column is the image and the forth is the label image.')
parser = argparse.ArgumentParser(description=desc, formatter_class=Formatter)

parser.add_argument('-i', '--input-list', required=True,
                    help='The input file of a list of images to show.')
parser.add_argument('-o', '--output-dir', required=True,
                    help='The output folder.')
parser.add_argument('-a', '--alpha', default=1.0, type=float,
                    help='The transparency of the label image.')
parser.add_argument('-t', '--slice-step', default=5, type=int,
                    help='Show every this number of slices.')
help = ('The colormap to load. It should be .txt or .npy. See '
        'segviz.load_colors for more details of the file format. It only has '
        'affect when using the -l option to show the overlay.')
parser.add_argument('-c', '--colormap', default=None, required=False, help=help)
parser.add_argument('-V', '--views', default=['axial', 'coronal', 'sagittal'],
                    choices={'axial', 'coronal', 'sagittal'}, nargs='+')
parser.add_argument('-r', '--reverse', action='store_true',
                    help='Reverse the order of views and names.')
parser.add_argument('-A', '--use-affine', action='store_true',
                    help='Use affine matrix to transform the image.')
parser.add_argument('-s', '--patch-size', type=int, default=20, required=False,
                    help='The size of checkerboard patches (width = height).')


args = parser.parse_args()


import csv
import subprocess
from jinja2 import Template
from pathlib import Path

from segviz import read_template


def get_command(mode):
    path = Path(__file__).parent.resolve()
    if mode == 'l' or mode == 'i' or mode == 'L':
        command = path.joinpath('convert_nii')
    elif mode == 'c':
        command = path.joinpath('create_checkerboard')
    else:
        assert False
    return str(command)


args.output_dir = Path(args.output_dir)
args.output_dir.mkdir(exist_ok=True, parents=True)

with open(args.input_list) as csvfile:
    contents = list(csv.reader(csvfile))

print('Generate slices...')

for row in contents:
    command = get_command(row[1])
    for view in args.views:
        if row[1] == 'i':
            image_fn = '{}_image.png'.format(view)
            image_fn = args.output_dir.joinpath('images', row[0], image_fn)
            image_fn = str(image_fn.resolve())
            if not Path(image_fn).exists():
                image_cmd = [command, '-i', row[2], '-v', view, '-S', '-C',
                             '-R', '-t', str(args.slice_step), '-o', image_fn]
                if len(row) == 3:
                    image_cmd.append('-q')
                else:
                    image_cmd.extend(['-m', row[3], '-M', row[4]])
                if args.use_affine:
                    image_cmd.append('-A')
                print(' '.join(image_cmd))
                proc = subprocess.run(image_cmd, capture_output=True)

        elif row[1] == 'L':
            label_fn = '{}_label.png'.format(view)
            label_fn = args.output_dir.joinpath('images', row[0], label_fn)
            label_fn = str(label_fn.resolve())
            if not Path(label_fn).exists():
                label_cmd = [command, '-i', row[2], '-l', row[3], '-v', view,
                             '-q', '-a', str(args.alpha), '-S', '-C', '-R',
                             '-t', str(args.slice_step), '-o', label_fn, '-s']
                if args.use_affine:
                    label_cmd.append('-A')
                if args.colormap is not None \
                        and Path(args.colormap).exists():
                    label_cmd.extend(['-c', args.colormap])
                else:
                    label_cmd.append('-r')
                print(' '.join(label_cmd))
                proc = subprocess.run(label_cmd, capture_output=True)

        elif row[1] == 'l':
            label_fn = '{}_label.png'.format(view)
            label_fn = args.output_dir.joinpath('images', row[0], label_fn)
            label_fn = str(label_fn.resolve())

            image_fn = '{}_image.png'.format(view)
            image_fn = args.output_dir.joinpath('images', row[0], image_fn)
            image_fn = str(image_fn.resolve())

            if not Path(label_fn).exists() or not Path(image_fn).exists():
                label_cmd = [command, '-i', row[2], '-l', row[3], '-v', view,
                             '-q', '-a', str(args.alpha), '-S', '-C', '-R',
                             '-t', str(args.slice_step), '-o', label_fn, '-s']
                if args.use_affine:
                    label_cmd.append('-A')
                if args.colormap is not None \
                        and Path(args.colormap).exists():
                    label_cmd.extend(['-c', args.colormap])
                else:
                    label_cmd.append('-r')
                print(' '.join(label_cmd))
                proc = subprocess.run(label_cmd, capture_output=True)

                slice_range = str(proc.stdout, 'utf-8').strip().split()
                image_cmd = [command, '-i', row[2], '-v', view, '-q', '-S',
                             '-C', '-R', '-t', str(args.slice_step),
                             '-o', image_fn, '-n', *slice_range]
                if args.use_affine:
                    image_cmd.append('-A')
                print(' '.join(image_cmd))
                proc = subprocess.run(image_cmd, capture_output=True)

        elif row[1] == 'c':
            image_fn = '{}_image.png'.format(view)
            image_fn = args.output_dir.joinpath('images', row[0], image_fn)
            image_fn = str(image_fn.resolve())
            if not Path(image_fn).exists():
                image_cmd = [command, '-1', row[2], '-2', row[3], '-v', view,
                             '-q', '-C', '-R', '-t', str(args.slice_step),
                             '-a', str(args.alpha), '-s', str(args.patch_size),
                             '-o', image_fn]
                if args.use_affine:
                    image_cmd.append('-A')
                print(' '.join(image_cmd))
                proc = subprocess.run(image_cmd, capture_output=True)

        else:
            assert False

template = Template(read_template())
names = [c[0] for c in contents]
modes = [c[1] for c in contents]
page = template.render(title='segviz', names=names, views=args.views,
                       modes=modes)
with open(args.output_dir.joinpath('index.html'), 'w') as html:
    html.write(page)
